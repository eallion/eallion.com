%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.5 (Build 23F79) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
18.460501 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.460501 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
43.475399 32.604031 m
44.4953 28.633301 l
45.530102 32.604031 l
46.5303 32.604031 l
47.57 28.656799 l
48.6544 32.604031 l
49.545601 32.604031 l
48.005798 27.5653 l
47.079899 27.5653 l
46.0005 31.4655 l
44.955799 27.5653 l
44.0299 27.5653 l
42.5 32.604031 l
43.475399 32.604031 l
h
W
0 0 132 43 rc
41.5 33.604031 m
50.545601 33.604031 l
50.545601 26.5653 l
41.5 26.5653 l
h
f
Q
q
50.315601 32.604031 m
51.162201 32.604031 l
51.162201 31.7337 l
51.231602 31.903 51.4016 32.108501 51.672199 32.349998 c
51.942902 32.59462 52.254799 32.716942 52.608002 32.716942 c
52.6245 32.716942 52.652599 32.71537 52.6922 32.712231 c
52.7318 32.709099 52.7994 32.70282 52.895199 32.693409 c
52.895199 31.7995 l
52.8424 31.808901 52.792801 31.815201 52.746601 31.8183 c
52.703701 31.821501 52.655899 31.823099 52.6031 31.823099 c
52.154099 31.823099 51.8092 31.684999 51.568199 31.409 c
51.327301 31.1362 51.206799 30.820999 51.206799 30.4634 c
51.206799 27.5653 l
50.315601 27.5653 l
50.315601 32.604031 l
h
W
0 0 132 43 rc
49.315601 33.716942 m
53.895199 33.716942 l
53.895199 26.5653 l
49.315601 26.5653 l
h
f
Q
q
53.5662 32.580502 m
54.472198 32.580502 l
54.472198 27.5653 l
53.5662 27.5653 l
53.5662 32.580502 l
h
53.5662 34.476479 m
54.472198 34.476479 l
54.472198 33.516731 l
53.5662 33.516731 l
53.5662 34.476479 l
h
W
0 0 132 43 rc
52.5662 35.476479 m
55.472198 35.476479 l
55.472198 26.5653 l
52.5662 26.5653 l
h
f
Q
q
55.900799 34.010719 m
56.801899 34.010719 l
56.801899 32.604031 l
57.648499 32.604031 l
57.648499 31.912399 l
56.801899 31.912399 l
56.801899 28.623899 l
56.801899 28.4482 56.864601 28.330601 56.990002 28.271 c
57.059299 28.2365 57.1749 28.219299 57.336601 28.219299 c
57.379501 28.219299 57.425701 28.219299 57.475201 28.219299 c
57.524799 28.222401 57.5825 28.2271 57.648499 28.2334 c
57.648499 27.5653 l
57.5462 27.5371 57.4389 27.516701 57.326698 27.5042 c
57.2178 27.4916 57.098999 27.485399 56.9702 27.485399 c
56.554298 27.485399 56.272099 27.585699 56.1236 27.786501 c
55.974998 27.990299 55.900799 28.253799 55.900799 28.576799 c
55.900799 31.912399 l
55.1828 31.912399 l
55.1828 32.604031 l
55.900799 32.604031 l
55.900799 34.010719 l
h
W
0 0 132 43 rc
54.1828 35.010719 m
58.648499 35.010719 l
58.648499 26.485399 l
54.1828 26.485399 l
h
f
Q
q
58.621498 34.010719 m
59.522701 34.010719 l
59.522701 32.604031 l
60.369301 32.604031 l
60.369301 31.912399 l
59.522701 31.912399 l
59.522701 28.623899 l
59.522701 28.4482 59.5854 28.330601 59.7108 28.271 c
59.780102 28.2365 59.895699 28.219299 60.0574 28.219299 c
60.1003 28.219299 60.1465 28.219299 60.195999 28.219299 c
60.245499 28.222401 60.303299 28.2271 60.369301 28.2334 c
60.369301 27.5653 l
60.266998 27.5371 60.159698 27.516701 60.047501 27.5042 c
59.938599 27.4916 59.819698 27.485399 59.691002 27.485399 c
59.275101 27.485399 58.992901 27.585699 58.844398 27.786501 c
58.695801 27.990299 58.621498 28.253799 58.621498 28.576799 c
58.621498 31.912399 l
57.903599 31.912399 l
57.903599 32.604031 l
58.621498 32.604031 l
58.621498 34.010719 l
h
W
0 0 132 43 rc
56.903599 35.010719 m
61.369301 35.010719 l
61.369301 26.485399 l
56.903599 26.485399 l
h
f
Q
q
63.372299 32.716942 m
63.7486 32.716942 64.113403 32.632252 64.466599 32.462898 c
64.819702 32.2967 65.088799 32.0802 65.273598 31.813601 c
65.451797 31.559601 65.570702 31.263201 65.630096 30.9245 c
65.682899 30.6924 65.709297 30.3223 65.709297 29.814199 c
61.822601 29.814199 l
61.8391 29.3029 61.966202 28.892099 62.203899 28.581499 c
62.441502 28.2742 62.809502 28.120501 63.307999 28.120501 c
63.773399 28.120501 64.144699 28.2663 64.421997 28.558001 c
64.580399 28.7274 64.692703 28.923401 64.758698 29.146099 c
65.635002 29.146099 l
65.6119 28.9611 65.534401 28.754101 65.402298 28.525101 c
65.273598 28.299299 65.128403 28.114201 64.966599 27.9699 c
64.695999 27.719 64.360901 27.5497 63.961498 27.4618 c
63.747002 27.411699 63.504398 27.3866 63.2337 27.3866 c
62.573502 27.3866 62.014099 27.614 61.555199 28.068701 c
61.096401 28.526699 60.867001 29.1665 60.867001 29.988199 c
60.867001 30.7974 61.098099 31.4545 61.5602 31.959499 c
62.022301 32.4645 62.6264 32.716942 63.372299 32.716942 c
h
64.793297 30.4869 m
64.757004 30.853901 64.672897 31.1472 64.540802 31.366699 c
64.2966 31.774401 63.888901 31.9783 63.317902 31.9783 c
62.9086 31.9783 62.5653 31.8372 62.287998 31.554899 c
62.010799 31.2757 61.863899 30.9198 61.847401 30.4869 c
64.793297 30.4869 l
h
W
0 0 132 43 rc
59.867001 33.716942 m
66.709297 33.716942 l
66.709297 26.3866 l
59.867001 26.3866 l
h
f
Q
q
66.7071 32.604031 m
67.553703 32.604031 l
67.553703 31.888901 l
67.804604 32.183701 68.070297 32.3955 68.350899 32.524052 c
68.6315 32.652641 68.943398 32.716942 69.286697 32.716942 c
70.0392 32.716942 70.5476 32.467602 70.8116 31.968901 c
70.956902 31.695999 71.029503 31.3055 71.029503 30.7974 c
71.029503 27.5653 l
70.123398 27.5653 l
70.123398 30.740999 l
70.123398 31.048401 70.0756 31.296101 69.979797 31.484301 c
69.821404 31.798 69.534203 31.9548 69.118301 31.9548 c
68.907097 31.9548 68.733803 31.934401 68.598396 31.8936 c
68.354202 31.8246 68.139603 31.6866 67.954803 31.479601 c
67.806198 31.3134 67.7089 31.1409 67.662697 30.962099 c
67.619797 30.786501 67.598297 30.534 67.598297 30.2047 c
67.598297 27.5653 l
66.7071 27.5653 l
66.7071 32.604031 l
h
W
0 0 132 43 rc
65.7071 33.716942 m
72.029503 33.716942 l
72.029503 26.5653 l
65.7071 26.5653 l
h
f
Q
q
74.901497 34.5 m
75.767998 34.5 l
75.767998 31.992399 l
75.9627 32.233898 76.195503 32.4174 76.466103 32.542858 c
76.736801 32.671459 77.030602 32.73576 77.347397 32.73576 c
78.007599 32.73576 78.542297 32.519341 78.951599 32.086498 c
79.364197 31.656799 79.570503 31.0217 79.570503 30.181101 c
79.570503 29.384501 79.3675 28.7227 78.961502 28.195801 c
78.555496 27.6688 77.992699 27.405399 77.273201 27.405399 c
76.870499 27.405399 76.530502 27.4979 76.253197 27.683001 c
76.088203 27.7927 75.911598 27.968399 75.723396 28.2099 c
75.723396 27.5653 l
74.901497 27.5653 l
74.901497 34.5 l
h
77.218697 28.1534 m
77.7006 28.1534 78.060402 28.3353 78.298103 28.6992 c
78.539001 29.063 78.6595 29.5429 78.6595 30.1388 c
78.6595 30.6688 78.539001 31.107901 78.298103 31.4561 c
78.060402 31.804199 77.7089 31.9783 77.2435 31.9783 c
76.837502 31.9783 76.481003 31.8356 76.174004 31.5502 c
75.8703 31.264799 75.718498 30.7943 75.718498 30.1388 c
75.718498 29.665199 75.781197 29.281 75.906601 28.986099 c
76.140999 28.431 76.5784 28.1534 77.218697 28.1534 c
h
W
0 0 132 43 rc
73.901497 35.5 m
80.570503 35.5 l
80.570503 26.405399 l
73.901497 26.405399 l
h
f
Q
q
83.826202 32.604031 m
84.811501 32.604031 l
84.686096 32.280998 84.407097 31.5439 83.974701 30.392799 c
83.651299 29.527201 83.3806 28.821501 83.162697 28.2757 c
82.647797 26.989799 82.284698 26.2057 82.073502 25.923401 c
81.862198 25.6411 81.4991 25.5 80.9842 25.5 c
80.858803 25.5 80.761398 25.5047 80.692101 25.514099 c
80.626099 25.5235 80.543503 25.5408 80.444504 25.565901 c
80.444504 26.3374 l
80.599701 26.2967 80.711899 26.271601 80.781197 26.262199 c
80.850502 26.252701 80.911598 26.247999 80.964401 26.247999 c
81.129402 26.247999 81.249901 26.2747 81.325798 26.327999 c
81.405098 26.378201 81.4711 26.440901 81.523903 26.516199 c
81.540398 26.5413 81.5998 26.669901 81.702103 26.902 c
81.804497 27.1341 81.8787 27.306601 81.924896 27.4195 c
79.964302 32.604031 l
80.974297 32.604031 l
82.395302 28.5016 l
83.826202 32.604031 l
h
W
0 0 132 43 rc
78.964302 33.604031 m
85.811501 33.604031 l
85.811501 24.5 l
78.964302 24.5 l
h
f
Q
q
88.2033 34.5 m
89.094498 34.5 l
89.094498 31.9219 l
89.305702 32.1759 89.495499 32.354698 89.663902 32.458199 c
89.951103 32.636959 90.309196 32.726349 90.738297 32.726349 c
91.507401 32.726349 92.0289 32.470699 92.302902 31.959499 c
92.451401 31.6803 92.525703 31.292999 92.525703 30.7974 c
92.525703 27.5653 l
91.609703 27.5653 l
91.609703 30.740999 l
91.609703 31.111099 91.560204 31.382401 91.461197 31.554899 c
91.2994 31.8309 90.995796 31.968901 90.550201 31.968901 c
90.180496 31.968901 89.845398 31.848101 89.545097 31.6066 c
89.244698 31.365101 89.094498 30.9088 89.094498 30.2376 c
89.094498 27.5653 l
88.2033 27.5653 l
88.2033 34.5 l
h
W
0 0 132 43 rc
87.2033 35.5 m
93.525703 35.5 l
93.525703 26.5653 l
87.2033 26.5653 l
h
f
Q
q
94.637497 32.604031 m
94.637497 29.259001 l
94.637497 29.001801 94.680397 28.7917 94.766197 28.628599 c
94.924599 28.327499 95.2201 28.176901 95.652496 28.176901 c
96.273003 28.176901 96.695503 28.440399 96.919998 28.9673 c
97.042099 29.249599 97.103203 29.636999 97.103203 30.1294 c
97.103203 32.604031 l
97.9944 32.604031 l
97.9944 27.5653 l
97.152702 27.5653 l
97.162598 28.308701 l
97.047096 28.117399 96.903503 27.955799 96.731796 27.8241 c
96.391899 27.5606 95.979301 27.4289 95.494003 27.4289 c
94.738197 27.4289 94.223198 27.6688 93.949303 28.148701 c
93.800697 28.405899 93.726501 28.7493 93.726501 29.179001 c
93.726501 32.604031 l
94.637497 32.604031 l
h
W
0 0 132 43 rc
92.726501 33.604031 m
98.9944 33.604031 l
98.9944 26.4289 l
92.726501 26.4289 l
h
f
Q
q
99.2892 32.604031 m
100.1706 32.604031 l
100.1706 31.888901 l
100.3818 32.1367 100.573 32.317001 100.745 32.43 c
101.039 32.621281 101.372 32.716942 101.745 32.716942 c
102.168 32.716942 102.508 32.618141 102.765 32.420502 c
102.91 32.307598 103.042 32.141399 103.161 31.9219 c
103.359 32.191601 103.592 32.390701 103.859 32.519341 c
104.127 32.65107 104.427 32.716942 104.76 32.716942 c
105.473 32.716942 105.959 32.472301 106.216 31.983 c
106.355 31.719601 106.424 31.365101 106.424 30.9198 c
106.424 27.5653 l
105.498 27.5653 l
105.498 31.065599 l
105.498 31.401199 105.409 31.631701 105.231 31.7572 c
105.056 31.882601 104.841 31.9454 104.587 31.9454 c
104.237 31.9454 103.935 31.834 103.681 31.6113 c
103.43 31.3887 103.305 31.017 103.305 30.4963 c
103.305 27.5653 l
102.399 27.5653 l
102.399 30.853901 l
102.399 31.195801 102.356 31.445101 102.27 31.6019 c
102.135 31.8372 101.882 31.9548 101.512 31.9548 c
101.176 31.9548 100.869 31.8309 100.591 31.583099 c
100.3174 31.3353 100.1805 30.886801 100.1805 30.2376 c
100.1805 27.5653 l
99.2892 27.5653 l
99.2892 32.604031 l
h
W
0 0 132 43 rc
98.2892 33.716942 m
107.424 33.716942 l
107.424 26.5653 l
98.2892 26.5653 l
h
f
Q
q
108.318 28.9062 m
108.318 28.661501 108.412 28.468599 108.6 28.327499 c
108.788 28.186399 109.011 28.115801 109.269 28.115801 c
109.582 28.115801 109.886 28.184799 110.18 28.3228 c
110.675 28.5518 110.922 28.9266 110.922 29.447201 c
110.922 30.1294 l
110.813 30.063499 110.673 30.0086 110.501 29.964701 c
110.33 29.920799 110.161 29.8894 109.996 29.8706 c
109.457 29.8048 l
109.133 29.764 108.891 29.699699 108.729 29.6119 c
108.455 29.4645 108.318 29.2292 108.318 28.9062 c
h
110.477 30.6187 m
110.681 30.643801 110.818 30.7253 110.888 30.8633 c
110.927 30.938601 110.947 31.046801 110.947 31.187901 c
110.947 31.4765 110.838 31.684999 110.62 31.813601 c
110.406 31.9454 110.097 32.0112 109.694 32.0112 c
109.229 32.0112 108.899 31.892099 108.704 31.6537 c
108.595 31.521999 108.524 31.325899 108.491 31.065599 c
107.659 31.065599 l
107.676 31.6866 107.887 32.117901 108.293 32.359402 c
108.702 32.604019 109.176 32.726349 109.714 32.726349 c
110.338 32.726349 110.845 32.61343 111.234 32.3876 c
111.62 32.1618 111.813 31.810499 111.813 31.333799 c
111.813 28.431 l
111.813 28.343201 111.832 28.2726 111.868 28.219299 c
111.908 28.166 111.988 28.139299 112.111 28.139299 c
112.15 28.139299 112.195 28.1409 112.244 28.143999 c
112.294 28.150299 112.347 28.1581 112.403 28.1675 c
112.403 27.5418 l
112.264 27.5042 112.158 27.4807 112.086 27.471201 c
112.013 27.4618 111.914 27.4571 111.789 27.4571 c
111.482 27.4571 111.259 27.5606 111.12 27.767599 c
111.048 27.877399 110.996 28.0327 110.967 28.2334 c
110.785 28.007601 110.524 27.8116 110.184 27.6453 c
109.844 27.479099 109.47 27.396 109.061 27.396 c
108.569 27.396 108.166 27.5371 107.852 27.819401 c
107.542 28.104799 107.387 28.4608 107.387 28.8873 c
107.387 29.3547 107.541 29.7169 107.848 29.9741 c
108.154 30.2313 108.557 30.3897 109.056 30.449301 c
110.477 30.6187 l
h
W
0 0 132 43 rc
106.387 33.726349 m
113.403 33.726349 l
113.403 26.396 l
106.387 26.396 l
h
f
Q
q
113.178 32.604031 m
114.024 32.604031 l
114.024 31.888901 l
114.275 32.183701 114.541 32.3955 114.821 32.524052 c
115.102 32.652641 115.414 32.716942 115.757 32.716942 c
116.51 32.716942 117.018 32.467602 117.282 31.968901 c
117.427 31.695999 117.5 31.3055 117.5 30.7974 c
117.5 27.5653 l
116.594 27.5653 l
116.594 30.740999 l
116.594 31.048401 116.546 31.296101 116.45 31.484301 c
116.292 31.798 116.005 31.9548 115.589 31.9548 c
115.378 31.9548 115.204 31.934401 115.069 31.8936 c
114.825 31.8246 114.61 31.6866 114.425 31.479601 c
114.277 31.3134 114.179 31.1409 114.133 30.962099 c
114.09 30.786501 114.069 30.534 114.069 30.2047 c
114.069 27.5653 l
113.178 27.5653 l
113.178 32.604031 l
h
W
0 0 132 43 rc
112.178 33.716942 m
118.5 33.716942 l
118.5 26.5653 l
112.178 26.5653 l
h
f
Q
q
93.828102 10.4149 m
98.449997 23.5 l
101.508 23.5 l
106.094 10.4149 l
103.16 10.4149 l
102.325 13.1047 l
97.553703 13.1047 l
96.657501 10.4149 l
93.828102 10.4149 l
h
99.952499 20.5084 m
98.282997 15.3595 l
101.569 15.3595 l
99.952499 20.5084 l
h
W*
0 0 132 43 rc
92.828102 24.5 m
107.094 24.5 l
107.094 9.4148998 l
92.828102 9.4148998 l
h
f
Q
q
78.101997 20.304199 m
79.361504 20.304199 80.345596 19.845501 81.054398 18.9282 c
81.769096 18.0109 82.126404 16.8272 82.126404 15.3773 c
82.126404 13.8741 81.774902 12.6283 81.071999 11.6399 c
80.369003 10.6516 79.387802 10.1574 78.128403 10.1574 c
77.337601 10.1574 76.702003 10.3172 76.221703 10.6368 c
75.934601 10.8262 75.624199 11.1576 75.290298 11.6311 c
75.290298 10.4149 l
72.838799 10.4149 l
72.838799 23.482201 l
75.334198 23.482201 l
75.334198 18.8305 l
75.650497 19.2803 75.9991 19.6236 76.379799 19.8603 c
76.830902 20.1562 77.404999 20.304199 78.101997 20.304199 c
h
77.460602 12.2436 m
78.105003 12.2436 78.605797 12.507 78.963097 13.0337 c
79.320503 13.5604 79.4991 14.2528 79.4991 15.111 c
79.4991 15.7975 79.411301 16.365601 79.235497 16.815399 c
78.901604 17.667601 78.286598 18.0937 77.390297 18.0937 c
76.4823 18.0937 75.858498 17.6765 75.5187 16.841999 c
75.343002 16.398199 75.255096 15.8241 75.255096 15.1198 c
75.255096 14.2913 75.436699 13.6048 75.799896 13.0603 c
76.163101 12.5158 76.716698 12.2436 77.460602 12.2436 c
h
W*
0 0 132 43 rc
71.838799 24.482201 m
83.126404 24.482201 l
83.126404 9.1574001 l
71.838799 9.1574001 l
h
f
Q
q
67.023598 12.3413 m
66.924004 12.4419 66.874199 12.6904 66.874199 13.0869 c
66.874199 18.2003 l
68.429497 18.2003 l
68.429497 20.0023 l
66.874199 20.0023 l
66.874199 22.701 l
64.3964 22.701 l
64.3964 20.0023 l
63.060799 20.0023 l
63.060799 18.2003 l
64.3964 18.2003 l
64.3964 12.2436 l
64.3964 11.6399 64.537003 11.1931 64.8181 10.9031 c
65.251602 10.4474 66.059998 10.2403 67.243301 10.2817 c
68.429497 10.3261 l
68.429497 12.217 l
68.347504 12.2111 68.262604 12.2051 68.174698 12.1992 c
67.937401 12.1992 l
67.427803 12.1992 67.123199 12.2466 67.023598 12.3413 c
h
W
0 0 132 43 rc
62.060799 23.701 m
69.429497 23.701 l
69.429497 9.2403002 l
62.060799 9.2403002 l
h
f
Q
q
62.963402 15.2352 m
62.963402 13.8149 62.5592 12.5987 61.7509 11.5867 c
60.942501 10.5806 59.715199 10.0775 58.069199 10.0775 c
56.4231 10.0775 55.1959 10.5806 54.387501 11.5867 c
53.579102 12.5987 53.174999 13.8149 53.174999 15.2352 c
53.174999 16.631901 53.579102 17.842199 54.387501 18.8661 c
55.1959 19.8899 56.4231 20.4018 58.069199 20.4018 c
59.715199 20.4018 60.942501 19.8899 61.7509 18.8661 c
62.5592 17.842199 62.963402 16.631901 62.963402 15.2352 c
h
58.060398 12.1992 m
58.792599 12.1992 59.355 12.4626 59.747501 12.9893 c
60.1399 13.516 60.336201 14.2647 60.336201 15.2352 c
60.336201 16.205799 60.1399 16.9515 59.747501 17.4723 c
59.355 17.999001 58.792599 18.2624 58.060398 18.2624 c
57.328201 18.2624 56.762901 17.999001 56.364601 17.4723 c
55.972099 16.9515 55.775799 16.205799 55.775799 15.2352 c
55.775799 14.2647 55.972099 13.516 56.364601 12.9893 c
56.762901 12.4626 57.328201 12.1992 58.060398 12.1992 c
h
W*
0 0 132 43 rc
52.174999 21.4018 m
63.963402 21.4018 l
63.963402 9.0775003 l
52.174999 9.0775003 l
h
f
Q
q
48.7896 20.321899 m
49.779598 20.321899 50.588001 20.058599 51.214802 19.5319 c
51.847401 19.011101 52.163799 18.143999 52.163799 16.930799 c
52.163799 10.4149 l
49.598 10.4149 l
49.598 16.300501 l
49.598 16.8095 49.530701 17.2001 49.395901 17.4723 c
49.149899 17.9695 48.681301 18.218 47.990002 18.218 c
47.140701 18.218 46.5578 17.854 46.241501 17.126101 c
46.077499 16.7414 45.995399 16.2502 45.995399 15.6525 c
45.995399 10.4149 l
43.5 10.4149 l
43.5 20.0734 l
45.916401 20.0734 l
45.916401 18.6619 l
46.238499 19.159 46.543201 19.517099 46.8302 19.736 c
47.345699 20.1266 47.998798 20.321899 48.7896 20.321899 c
h
W
0 0 132 43 rc
42.5 21.321899 m
53.163799 21.321899 l
53.163799 9.4148998 l
42.5 9.4148998 l
h
f
Q
q
83.910797 8.5417995 m
83.594498 8.5594997 l
83.594498 6.5355 l
83.863899 6.5177999 84.066002 6.5089002 84.200798 6.5089002 c
84.335503 6.5029998 84.514198 6.5 84.736801 6.5 c
85.843903 6.5 86.582001 6.7219 86.950996 7.1658001 c
87.320099 7.6037002 87.8209 8.7399998 88.453598 10.5747 c
91.739799 20.091101 l
89.0774 20.091101 l
87.100403 12.9538 l
85.009201 20.091101 l
82.223701 20.091101 l
85.738503 9.9888 l
85.761902 9.9177999 85.709198 9.7224998 85.580299 9.4028997 c
85.457298 9.0832996 85.322502 8.8732004 85.176102 8.7726002 c
85.023804 8.6660995 84.836304 8.5979996 84.6138 8.5684004 c
84.391197 8.5388002 84.156799 8.5298996 83.910797 8.5417995 c
h
W
0 0 132 43 rc
81.223701 21.091101 m
92.739799 21.091101 l
92.739799 5.5 l
81.223701 5.5 l
h
f
Q
q
108.402 12.6376 m
108.402 21.2742 l
106.806 21.2742 l
106.806 23.5 l
112.5 23.5 l
112.5 21.2742 l
111.09 21.2742 l
111.09 12.6376 l
112.5 12.6376 l
112.5 10.4118 l
106.806 10.4118 l
106.806 12.6376 l
108.402 12.6376 l
h
W
0 0 132 43 rc
105.806 24.5 m
113.5 24.5 l
113.5 9.4118004 l
105.806 9.4118004 l
h
f
ep
end
%%Trailer
%%EOF
