%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.5 (Build 23F79) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
44.796299 28.1346 m
45.210201 28.1346 45.553501 28.299299 45.826199 28.628599 c
46.1022 28.9611 46.240101 29.4566 46.240101 30.115299 c
46.240101 30.516701 46.179401 30.8617 46.0578 31.150299 c
45.827801 31.7054 45.407299 31.983 44.796299 31.983 c
44.181999 31.983 43.761501 31.6898 43.534801 31.103201 c
43.4133 30.7896 43.352501 30.3913 43.352501 29.9083 c
43.352501 29.5193 43.4133 29.1884 43.534801 28.9156 c
43.764801 28.394899 44.185299 28.1346 44.796299 28.1346 c
h
42.5 32.580502 m
43.362301 32.580502 l
43.362301 31.912399 l
43.5397 32.141399 43.733601 32.3186 43.943802 32.444099 c
44.242802 32.632252 44.594299 32.726349 44.998299 32.726349 c
45.596199 32.726349 46.103802 32.506802 46.521 32.067699 c
46.938202 31.631701 47.146801 31.007601 47.146801 30.1952 c
47.146801 29.0975 46.846199 28.3134 46.245098 27.842899 c
45.863998 27.545 45.420502 27.396 44.9146 27.396 c
44.517101 27.396 44.183601 27.479099 43.914299 27.6453 c
43.756599 27.739401 43.580799 27.9009 43.387001 28.1299 c
43.387001 25.556499 l
42.5 25.556499 l
42.5 32.580502 l
h
W
0 0 132 43 rc
41.5 33.726349 m
48.146801 33.726349 l
48.146801 24.556499 l
41.5 24.556499 l
h
f
Q
q
48.462898 28.9062 m
48.462898 28.661501 48.556499 28.468599 48.743801 28.327499 c
48.931 28.186399 49.152802 28.115801 49.409 28.115801 c
49.7211 28.115801 50.023399 28.184799 50.315701 28.3228 c
50.808498 28.5518 51.054901 28.9266 51.054901 29.447201 c
51.054901 30.1294 l
50.946499 30.063499 50.8069 30.0086 50.636002 29.964701 c
50.465199 29.920799 50.297699 29.8894 50.1334 29.8706 c
49.596298 29.8048 l
49.2743 29.764 49.032902 29.699699 48.871899 29.6119 c
48.599201 29.4645 48.462898 29.2292 48.462898 28.9062 c
h
50.611401 30.6187 m
50.815102 30.643801 50.951401 30.7253 51.020401 30.8633 c
51.059799 30.938601 51.079498 31.046801 51.079498 31.187901 c
51.079498 31.4765 50.9711 31.684999 50.754299 31.813601 c
50.540798 31.9454 50.233601 32.0112 49.832802 32.0112 c
49.369598 32.0112 49.0411 31.892099 48.847301 31.6537 c
48.738899 31.521999 48.668201 31.325899 48.635399 31.065599 c
47.807499 31.065599 l
47.824001 31.6866 48.034199 32.117901 48.438301 32.359402 c
48.8456 32.604031 49.317101 32.726349 49.852501 32.726349 c
50.4734 32.726349 50.977699 32.61343 51.365299 32.3876 c
51.749699 32.1618 51.941898 31.810499 51.941898 31.333799 c
51.941898 28.431 l
51.941898 28.343201 51.9599 28.2726 51.996101 28.219299 c
52.0355 28.166 52.116001 28.139299 52.237499 28.139299 c
52.277 28.139299 52.321301 28.1409 52.370602 28.143999 c
52.419899 28.150299 52.472401 28.1581 52.528301 28.1675 c
52.528301 27.5418 l
52.390301 27.5042 52.285198 27.4807 52.212898 27.471201 c
52.140598 27.4618 52.042099 27.4571 51.917198 27.4571 c
51.611698 27.4571 51.389999 27.5606 51.251999 27.767599 c
51.179699 27.877399 51.128799 28.0327 51.099201 28.2334 c
50.918598 28.007601 50.659 27.8116 50.320702 27.6453 c
49.9823 27.479099 49.609402 27.396 49.202099 27.396 c
48.712601 27.396 48.311798 27.5371 47.999699 27.819401 c
47.690899 28.104799 47.536499 28.4608 47.536499 28.8873 c
47.536499 29.3547 47.689301 29.7169 47.994801 29.9741 c
48.300301 30.2313 48.701099 30.3897 49.197102 30.449301 c
50.611401 30.6187 l
h
W
0 0 132 43 rc
46.536499 33.726349 m
53.528301 33.726349 l
53.528301 26.396 l
46.536499 26.396 l
h
f
Q
q
52.996799 32.580502 m
53.898602 32.580502 l
53.898602 27.5653 l
52.996799 27.5653 l
52.996799 32.580502 l
h
52.996799 34.476479 m
53.898602 34.476479 l
53.898602 33.516731 l
52.996799 33.516731 l
52.996799 34.476479 l
h
W
0 0 132 43 rc
51.996799 35.476479 m
54.898602 35.476479 l
54.898602 26.5653 l
51.996799 26.5653 l
h
f
Q
q
54.840199 32.604031 m
55.6828 32.604031 l
55.6828 31.888901 l
55.932499 32.183701 56.196899 32.3955 56.4762 32.524052 c
56.755402 32.652641 57.0658 32.716942 57.407501 32.716942 c
58.156502 32.716942 58.662399 32.467602 58.925201 31.968901 c
59.069801 31.695999 59.141998 31.3055 59.141998 30.7974 c
59.141998 27.5653 l
58.240299 27.5653 l
58.240299 30.740999 l
58.240299 31.048401 58.1926 31.296101 58.097401 31.484301 c
57.939701 31.798 57.6539 31.9548 57.239899 31.9548 c
57.029701 31.9548 56.857201 31.934401 56.7225 31.8936 c
56.479401 31.8246 56.2659 31.6866 56.081902 31.479601 c
55.934101 31.3134 55.8372 31.1409 55.791199 30.962099 c
55.748501 30.786501 55.7271 30.534 55.7271 30.2047 c
55.7271 27.5653 l
54.840199 27.5653 l
54.840199 32.604031 l
h
W
0 0 132 43 rc
53.840199 33.716942 m
60.141998 33.716942 l
60.141998 26.5653 l
53.840199 26.5653 l
h
f
Q
q
60.231499 34.010719 m
61.1283 34.010719 l
61.1283 32.604031 l
61.970901 32.604031 l
61.970901 31.912399 l
61.1283 31.912399 l
61.1283 28.623899 l
61.1283 28.4482 61.190701 28.330601 61.315601 28.271 c
61.384499 28.2365 61.4995 28.219299 61.6605 28.219299 c
61.703201 28.219299 61.749199 28.219299 61.7985 28.219299 c
61.847698 28.222401 61.905201 28.2271 61.970901 28.2334 c
61.970901 27.5653 l
61.869099 27.5371 61.762299 27.516701 61.6506 27.5042 c
61.542198 27.4916 61.424 27.485399 61.295799 27.485399 c
60.881901 27.485399 60.601002 27.585699 60.453201 27.786501 c
60.305401 27.990299 60.231499 28.253799 60.231499 28.576799 c
60.231499 31.912399 l
59.516899 31.912399 l
59.516899 32.604031 l
60.231499 32.604031 l
60.231499 34.010719 l
h
W
0 0 132 43 rc
58.516899 35.010719 m
62.970901 35.010719 l
62.970901 26.485399 l
58.516899 26.485399 l
h
f
Q
q
64.656898 32.716942 m
65.031403 32.716942 65.394402 32.632252 65.745903 32.462898 c
66.097504 32.2967 66.365196 32.0802 66.549202 31.813601 c
66.726601 31.559601 66.844803 31.263201 66.903999 30.9245 c
66.956497 30.6924 66.982803 30.3223 66.982803 29.814199 c
63.114601 29.814199 l
63.131001 29.3029 63.2575 28.892099 63.493999 28.581499 c
63.730499 28.2742 64.096802 28.120501 64.592903 28.120501 c
65.056099 28.120501 65.425598 28.2663 65.701599 28.558001 c
65.859299 28.7274 65.971001 28.923401 66.036697 29.146099 c
66.908897 29.146099 l
66.885902 28.9611 66.808701 28.754101 66.677299 28.525101 c
66.549202 28.299299 66.404602 28.114201 66.243599 27.9699 c
65.974297 27.719 65.6408 27.5497 65.243301 27.4618 c
65.0298 27.411699 64.7883 27.3866 64.518997 27.3866 c
63.8619 27.3866 63.305099 27.614 62.848499 28.068701 c
62.3918 28.526699 62.163502 29.1665 62.163502 29.988199 c
62.163502 30.7974 62.393501 31.4545 62.853401 31.959499 c
63.313301 32.4645 63.914501 32.716942 64.656898 32.716942 c
h
66.071198 30.4869 m
66.035004 30.853901 65.951302 31.1472 65.819901 31.366699 c
65.576797 31.774401 65.171097 31.9783 64.602699 31.9783 c
64.195396 31.9783 63.853699 31.8372 63.577801 31.554899 c
63.3018 31.2757 63.155602 30.9198 63.139198 30.4869 c
66.071198 30.4869 l
h
W
0 0 132 43 rc
61.163502 33.716942 m
67.982803 33.716942 l
67.982803 26.3866 l
61.163502 26.3866 l
h
f
Q
q
68.234802 30.0259 m
68.234802 29.486401 68.354698 29.0348 68.594597 28.6709 c
68.834396 28.3071 69.218697 28.1252 69.747597 28.1252 c
70.158302 28.1252 70.495003 28.292999 70.757797 28.628599 c
71.023903 28.9673 71.156998 29.4519 71.156998 30.0823 c
71.156998 30.719 71.020599 31.189501 70.748001 31.4937 c
70.475304 31.8011 70.138603 31.9548 69.737801 31.9548 c
69.291 31.9548 68.928001 31.7917 68.648804 31.4655 c
68.372803 31.139299 68.234802 30.659401 68.234802 30.0259 c
h
69.570198 32.693409 m
69.974297 32.693409 70.312698 32.61187 70.585403 32.448799 c
70.742996 32.354698 70.922096 32.189999 71.122498 31.9548 c
71.122498 34.5 l
71.974998 34.5 l
71.974998 27.5653 l
71.176697 27.5653 l
71.176697 28.2663 l
70.969704 27.955799 70.724998 27.7316 70.442398 27.593599 c
70.159897 27.455601 69.836304 27.3866 69.471703 27.3866 c
68.883698 27.3866 68.374496 27.621799 67.944099 28.0923 c
67.513702 28.565901 67.298599 29.1947 67.298599 29.9788 c
67.298599 30.712799 67.494003 31.3479 67.885002 31.884199 c
68.279198 32.423698 68.840897 32.693409 69.570198 32.693409 c
h
W
0 0 132 43 rc
66.298599 35.5 m
72.974998 35.5 l
72.974998 26.3866 l
66.298599 26.3866 l
h
f
Q
q
75.223099 34.5 m
76.085503 34.5 l
76.085503 31.992399 l
76.279297 32.233898 76.510902 32.4174 76.780296 32.542858 c
77.049599 32.671459 77.342003 32.73576 77.657402 32.73576 c
78.3144 32.73576 78.846603 32.519341 79.253998 32.086498 c
79.664597 31.656799 79.869904 31.0217 79.869904 30.181101 c
79.869904 29.384501 79.6679 28.7227 79.263802 28.195801 c
78.859802 27.6688 78.299599 27.405399 77.583504 27.405399 c
77.182701 27.405399 76.844299 27.4979 76.568398 27.683001 c
76.404099 27.7927 76.228401 27.968399 76.0411 28.2099 c
76.0411 27.5653 l
75.223099 27.5653 l
75.223099 34.5 l
h
77.529297 28.1534 m
78.008904 28.1534 78.366997 28.3353 78.6035 28.6992 c
78.8433 29.063 78.963203 29.5429 78.963203 30.1388 c
78.963203 30.6688 78.8433 31.107901 78.6035 31.4561 c
78.366997 31.804199 78.017097 31.9783 77.553902 31.9783 c
77.149803 31.9783 76.794998 31.8356 76.489502 31.5502 c
76.187302 31.264799 76.036201 30.7943 76.036201 30.1388 c
76.036201 29.665199 76.098602 29.281 76.223396 28.986099 c
76.456703 28.431 76.891998 28.1534 77.529297 28.1534 c
h
W
0 0 132 43 rc
74.223099 35.5 m
80.869904 35.5 l
80.869904 26.405399 l
74.223099 26.405399 l
h
f
Q
q
83.802597 32.604031 m
84.783203 32.604031 l
84.658401 32.280998 84.380798 31.5439 83.9505 30.392799 c
83.628502 29.527201 83.3591 28.821501 83.142303 28.2757 c
82.629799 26.989799 82.268501 26.2057 82.058197 25.923401 c
81.848 25.6411 81.486603 25.5 80.974098 25.5 c
80.849297 25.5 80.752403 25.5047 80.683403 25.514099 c
80.617699 25.5235 80.535599 25.5408 80.436996 25.565901 c
80.436996 26.3374 l
80.5914 26.2967 80.703102 26.271601 80.772102 26.262199 c
80.841103 26.252701 80.901901 26.247999 80.954399 26.247999 c
81.118698 26.247999 81.238602 26.2747 81.314102 26.327999 c
81.392998 26.378201 81.458702 26.440901 81.511299 26.516199 c
81.527702 26.5413 81.5868 26.669901 81.688698 26.902 c
81.790497 27.1341 81.864403 27.306601 81.9104 27.4195 c
79.959 32.604031 l
80.964302 32.604031 l
82.378502 28.5016 l
83.802597 32.604031 l
h
W
0 0 132 43 rc
78.959 33.604031 m
85.783203 33.604031 l
85.783203 24.5 l
78.959 24.5 l
h
f
Q
q
87.553398 34.5 m
88.440399 34.5 l
88.440399 31.9219 l
88.650597 32.1759 88.8395 32.354698 89.007103 32.458199 c
89.2929 32.636959 89.6493 32.726349 90.076401 32.726349 c
90.841797 32.726349 91.360901 32.470699 91.633499 31.959499 c
91.781403 31.6803 91.855301 31.292999 91.855301 30.7974 c
91.855301 27.5653 l
90.943703 27.5653 l
90.943703 30.740999 l
90.943703 31.111099 90.894402 31.382401 90.795799 31.554899 c
90.634903 31.8309 90.332603 31.968901 89.889099 31.968901 c
89.521202 31.968901 89.187798 31.848101 88.888802 31.6066 c
88.589897 31.365101 88.440399 30.9088 88.440399 30.2376 c
88.440399 27.5653 l
87.553398 27.5653 l
87.553398 34.5 l
h
W
0 0 132 43 rc
86.553398 35.5 m
92.855301 35.5 l
92.855301 26.5653 l
86.553398 26.5653 l
h
f
Q
q
93.654297 32.604031 m
93.654297 29.259001 l
93.654297 29.001801 93.696999 28.7917 93.782402 28.628599 c
93.940102 28.327499 94.2341 28.176901 94.664497 28.176901 c
95.282097 28.176901 95.702599 28.440399 95.926003 28.9673 c
96.047501 29.249599 96.108299 29.636999 96.108299 30.1294 c
96.108299 32.604031 l
96.9953 32.604031 l
96.9953 27.5653 l
96.1576 27.5653 l
96.167397 28.308701 l
96.052399 28.117399 95.9095 27.955799 95.738701 27.8241 c
95.400398 27.5606 94.9897 27.4289 94.506798 27.4289 c
93.754501 27.4289 93.241997 27.6688 92.969299 28.148701 c
92.821503 28.405899 92.747597 28.7493 92.747597 29.179001 c
92.747597 32.604031 l
93.654297 32.604031 l
h
W
0 0 132 43 rc
91.747597 33.604031 m
97.9953 33.604031 l
97.9953 26.4289 l
91.747597 26.4289 l
h
f
Q
q
97.981201 32.604031 m
98.858299 32.604031 l
98.858299 31.888901 l
99.068604 32.1367 99.259102 32.317001 99.43 32.43 c
99.722298 32.621281 100.0541 32.716942 100.4254 32.716942 c
100.846 32.716942 101.184 32.618141 101.44 32.420502 c
101.585 32.307598 101.716 32.141399 101.835 31.9219 c
102.032 32.191601 102.263 32.390701 102.529 32.519341 c
102.796 32.65107 103.095 32.716942 103.426 32.716942 c
104.136 32.716942 104.619 32.472301 104.875 31.983 c
105.013 31.719601 105.082 31.365101 105.082 30.9198 c
105.082 27.5653 l
104.161 27.5653 l
104.161 31.065599 l
104.161 31.401199 104.072 31.631701 103.894 31.7572 c
103.72 31.882601 103.507 31.9454 103.254 31.9454 c
102.906 31.9454 102.605 31.834 102.352 31.6113 c
102.102 31.3887 101.978 31.017 101.978 30.4963 c
101.978 27.5653 l
101.076 27.5653 l
101.076 30.853901 l
101.076 31.195801 101.033 31.445101 100.948 31.6019 c
100.813 31.8372 100.562 31.9548 100.1938 31.9548 c
99.858704 31.9548 99.5532 31.8309 99.277199 31.583099 c
99.004501 31.3353 98.868202 30.886801 98.868202 30.2376 c
98.868202 27.5653 l
97.981201 27.5653 l
97.981201 32.604031 l
h
W
0 0 132 43 rc
96.981201 33.716942 m
106.082 33.716942 l
106.082 26.5653 l
96.981201 26.5653 l
h
f
Q
q
106.664 28.9062 m
106.664 28.661501 106.758 28.468599 106.945 28.327499 c
107.132 28.186399 107.354 28.115801 107.61 28.115801 c
107.922 28.115801 108.225 28.184799 108.517 28.3228 c
109.01 28.5518 109.256 28.9266 109.256 29.447201 c
109.256 30.1294 l
109.148 30.063499 109.008 30.0086 108.837 29.964701 c
108.667 29.920799 108.499 29.8894 108.335 29.8706 c
107.798 29.8048 l
107.476 29.764 107.234 29.699699 107.073 29.6119 c
106.801 29.4645 106.664 29.2292 106.664 28.9062 c
h
108.813 30.6187 m
109.016 30.643801 109.153 30.7253 109.222 30.8633 c
109.261 30.938601 109.281 31.046801 109.281 31.187901 c
109.281 31.4765 109.172 31.684999 108.956 31.813601 c
108.742 31.9454 108.435 32.0112 108.034 32.0112 c
107.571 32.0112 107.242 31.892099 107.049 31.6537 c
106.94 31.521999 106.87 31.325899 106.837 31.065599 c
106.009 31.065599 l
106.025 31.6866 106.236 32.117901 106.64 32.359402 c
107.047 32.604031 107.518 32.726349 108.054 32.726349 c
108.675 32.726349 109.179 32.61343 109.567 32.3876 c
109.951 32.1618 110.143 31.810499 110.143 31.333799 c
110.143 28.431 l
110.143 28.343201 110.161 28.2726 110.197 28.219299 c
110.237 28.166 110.317 28.139299 110.439 28.139299 c
110.478 28.139299 110.523 28.1409 110.572 28.143999 c
110.621 28.150299 110.674 28.1581 110.73 28.1675 c
110.73 27.5418 l
110.592 27.5042 110.486 27.4807 110.414 27.471201 c
110.342 27.4618 110.243 27.4571 110.119 27.4571 c
109.813 27.4571 109.591 27.5606 109.453 27.767599 c
109.381 27.877399 109.33 28.0327 109.301 28.2334 c
109.12 28.007601 108.86 27.8116 108.522 27.6453 c
108.184 27.479099 107.811 27.396 107.403 27.396 c
106.914 27.396 106.513 27.5371 106.201 27.819401 c
105.892 28.104799 105.738 28.4608 105.738 28.8873 c
105.738 29.3547 105.891 29.7169 106.196 29.9741 c
106.502 30.2313 106.902 30.3897 107.398 30.449301 c
108.813 30.6187 l
h
W
0 0 132 43 rc
104.738 33.726349 m
111.73 33.726349 l
111.73 26.396 l
104.738 26.396 l
h
f
Q
q
111.198 32.604031 m
112.041 32.604031 l
112.041 31.888901 l
112.29 32.183701 112.555 32.3955 112.834 32.524052 c
113.113 32.652641 113.424 32.716942 113.765 32.716942 c
114.514 32.716942 115.02 32.467602 115.283 31.968901 c
115.428 31.695999 115.5 31.3055 115.5 30.7974 c
115.5 27.5653 l
114.598 27.5653 l
114.598 30.740999 l
114.598 31.048401 114.551 31.296101 114.455 31.484301 c
114.298 31.798 114.012 31.9548 113.598 31.9548 c
113.388 31.9548 113.215 31.934401 113.08 31.8936 c
112.837 31.8246 112.624 31.6866 112.44 31.479601 c
112.292 31.3134 112.195 31.1409 112.149 30.962099 c
112.106 30.786501 112.085 30.534 112.085 30.2047 c
112.085 27.5653 l
111.198 27.5653 l
111.198 32.604031 l
h
W
0 0 132 43 rc
110.198 33.716942 m
116.5 33.716942 l
116.5 26.5653 l
110.198 26.5653 l
h
f
Q
q
93.828102 10.4149 m
98.449997 23.5 l
101.508 23.5 l
106.094 10.4149 l
103.16 10.4149 l
102.325 13.1047 l
97.553703 13.1047 l
96.657501 10.4149 l
93.828102 10.4149 l
h
99.952499 20.5084 m
98.282997 15.3595 l
101.569 15.3595 l
99.952499 20.5084 l
h
W*
0 0 132 43 rc
92.828102 24.5 m
107.094 24.5 l
107.094 9.4148998 l
92.828102 9.4148998 l
h
f
Q
q
78.101997 20.304199 m
79.361504 20.304199 80.345596 19.845501 81.054398 18.9282 c
81.769096 18.0109 82.126404 16.8272 82.126404 15.3773 c
82.126404 13.8741 81.774902 12.6283 81.071999 11.6399 c
80.369003 10.6516 79.387802 10.1574 78.128403 10.1574 c
77.337601 10.1574 76.702003 10.3172 76.221703 10.6368 c
75.934601 10.8262 75.624199 11.1576 75.290298 11.6311 c
75.290298 10.4149 l
72.838799 10.4149 l
72.838799 23.482201 l
75.334198 23.482201 l
75.334198 18.8305 l
75.650497 19.2803 75.9991 19.6236 76.379799 19.8603 c
76.830902 20.1562 77.4049 20.304199 78.101997 20.304199 c
h
77.460602 12.2436 m
78.105003 12.2436 78.605797 12.507 78.963097 13.0337 c
79.320503 13.5604 79.4991 14.2528 79.4991 15.111 c
79.4991 15.7975 79.411301 16.365601 79.235497 16.815399 c
78.901604 17.667601 78.286598 18.0937 77.390297 18.0937 c
76.4823 18.0937 75.858498 17.6765 75.5187 16.841999 c
75.343002 16.398199 75.255096 15.8241 75.255096 15.1198 c
75.255096 14.2913 75.436699 13.6048 75.799896 13.0603 c
76.163101 12.5158 76.716698 12.2436 77.460602 12.2436 c
h
W*
0 0 132 43 rc
71.838799 24.482201 m
83.126404 24.482201 l
83.126404 9.1574001 l
71.838799 9.1574001 l
h
f
Q
q
67.023598 12.3413 m
66.924004 12.4419 66.874199 12.6904 66.874199 13.0869 c
66.874199 18.2003 l
68.429497 18.2003 l
68.429497 20.0023 l
66.874199 20.0023 l
66.874199 22.701 l
64.3964 22.701 l
64.3964 20.0023 l
63.060799 20.0023 l
63.060799 18.2003 l
64.3964 18.2003 l
64.3964 12.2436 l
64.3964 11.6399 64.537003 11.1931 64.8181 10.9031 c
65.251602 10.4474 66.059998 10.2403 67.243301 10.2817 c
68.429497 10.3261 l
68.429497 12.217 l
68.347504 12.2111 68.262604 12.2051 68.174698 12.1992 c
67.937401 12.1992 l
67.427803 12.1992 67.123199 12.2466 67.023598 12.3413 c
h
W
0 0 132 43 rc
62.060799 23.701 m
69.429497 23.701 l
69.429497 9.2403002 l
62.060799 9.2403002 l
h
f
Q
q
62.963402 15.2352 m
62.963402 13.8149 62.5592 12.5987 61.750801 11.5867 c
60.942501 10.5806 59.715199 10.0775 58.069199 10.0775 c
56.4231 10.0775 55.1959 10.5806 54.387501 11.5867 c
53.579102 12.5987 53.1749 13.8149 53.1749 15.2352 c
53.1749 16.631901 53.579102 17.842199 54.387501 18.8661 c
55.1959 19.8899 56.4231 20.4018 58.069199 20.4018 c
59.715199 20.4018 60.942501 19.8899 61.750801 18.8661 c
62.5592 17.842199 62.963402 16.631901 62.963402 15.2352 c
h
58.060398 12.1992 m
58.792599 12.1992 59.355 12.4626 59.747501 12.9893 c
60.1399 13.516 60.336201 14.2647 60.336201 15.2352 c
60.336201 16.205799 60.1399 16.9515 59.747501 17.4723 c
59.355 17.999001 58.792599 18.2624 58.060398 18.2624 c
57.328201 18.2624 56.762901 17.999001 56.364601 17.4723 c
55.972099 16.9515 55.775799 16.205799 55.775799 15.2352 c
55.775799 14.2647 55.972099 13.516 56.364601 12.9893 c
56.762901 12.4626 57.328201 12.1992 58.060398 12.1992 c
h
W*
0 0 132 43 rc
52.1749 21.4018 m
63.963402 21.4018 l
63.963402 9.0775003 l
52.1749 9.0775003 l
h
f
Q
q
48.7896 20.321899 m
49.779598 20.321899 50.588001 20.058599 51.214802 19.5319 c
51.847401 19.011101 52.163799 18.143999 52.163799 16.930799 c
52.163799 10.4149 l
49.598 10.4149 l
49.598 16.300501 l
49.598 16.8095 49.530701 17.2001 49.395901 17.4723 c
49.149899 17.9695 48.681301 18.218 47.990002 18.218 c
47.140701 18.218 46.5578 17.854 46.241501 17.126101 c
46.077499 16.7414 45.995399 16.2502 45.995399 15.6525 c
45.995399 10.4149 l
43.5 10.4149 l
43.5 20.0734 l
45.916401 20.0734 l
45.916401 18.6619 l
46.238499 19.159 46.543201 19.517099 46.8302 19.736 c
47.345699 20.1266 47.998798 20.321899 48.7896 20.321899 c
h
W
0 0 132 43 rc
42.5 21.321899 m
53.163799 21.321899 l
53.163799 9.4148998 l
42.5 9.4148998 l
h
f
Q
q
83.910797 8.5417995 m
83.594498 8.5594997 l
83.594498 6.5355 l
83.863899 6.5177999 84.066002 6.5089002 84.200798 6.5089002 c
84.335503 6.5029998 84.514198 6.5 84.736801 6.5 c
85.843903 6.5 86.582001 6.7219 86.950996 7.1658001 c
87.320099 7.6037002 87.8209 8.7399998 88.453598 10.5747 c
91.739799 20.091101 l
89.0774 20.091101 l
87.100403 12.9538 l
85.009201 20.091101 l
82.223701 20.091101 l
85.738503 9.9888 l
85.761902 9.9177999 85.709198 9.7224998 85.580299 9.4028997 c
85.457298 9.0832996 85.322502 8.8732004 85.176102 8.7726002 c
85.023804 8.6660995 84.836304 8.5979996 84.613701 8.5684004 c
84.391098 8.5388002 84.156799 8.5298996 83.910797 8.5417995 c
h
W
0 0 132 43 rc
81.223701 21.091101 m
92.739799 21.091101 l
92.739799 5.5 l
81.223701 5.5 l
h
f
Q
q
108.402 12.6376 m
108.402 21.2742 l
106.806 21.2742 l
106.806 23.5 l
112.5 23.5 l
112.5 21.2742 l
111.09 21.2742 l
111.09 12.6376 l
112.5 12.6376 l
112.5 10.4118 l
106.806 10.4118 l
106.806 12.6376 l
108.402 12.6376 l
h
W
0 0 132 43 rc
105.806 24.5 m
113.5 24.5 l
113.5 9.4118004 l
105.806 9.4118004 l
h
f
Q
q
18.460501 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.460501 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
