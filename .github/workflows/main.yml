name: Build Hugo and Deploy

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      build_content:
        description: "选择构建范围："
        required: true
        default: 'build-hugo'
        type: choice
        options:
          - 'build-album'
          - 'build-hugo'
          - 'build-mastodon'
          - 'build-media'
          - 'build-penta'
  repository_dispatch:
    types: [build-album, build-hugo, build-mastodon, build-media, build-penta]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      HUGO_CACHEDIR: /tmp/.hugo_cache
      HUGOMODS_CACHEDIR: /tmp/.hugo_mods_cache
      PNPM_CACHEDIR: /tmp/.pnpm-store
      ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
      DIRECTUS_ACCESS_TOKEN: ${{ secrets.DIRECTUS_ACCESS_TOKEN }}
      DIRECTUS_API_URL: ${{ secrets.DIRECTUS_API_URL }}
      DIRECTUS_FILES_URL: ${{ secrets.DIRECTUS_FILES_URL }}
      DIRECTUS_S3_URL: ${{ secrets.DIRECTUS_S3_URL }}
      ESA_SITE_ID: ${{ secrets.ESA_SITE_ID }}
      NEODB_ACCESS_TOKEN: ${{ secrets.NEODB_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true
          fetch-depth: 1

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.148.2'
          extended: true

      - name: Cache Hugo Resources
        uses: actions/cache@v4
        id: cache-hugo
        with:
          path: |
            resources/_gen
            ${{ env.HUGO_CACHEDIR }}
          key: ${{ runner.os }}-hugo-${{ hashFiles('content/**', 'assets/**', 'layouts/**', 'config/**', 'static/**', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-hugo-

      - name: Cache Hugo Modules
        uses: actions/cache@v4
        with:
          path: ${{ env.HUGOMODS_CACHEDIR }}
          key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugomod-

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Cache PNPM Store
        uses: actions/cache@v4
        with:
          path: ${{ env.PNPM_CACHEDIR }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: |
          pnpm install

      - name: Setup Aliyun CLI
        uses: aliyun/setup-aliyun-cli-action@v1
        with:
          version: "latest"

      - name: Configure Aliyun CLI
        run: |
          aliyun configure set --profile default \
            --mode "AK" \
            --access-key-id ${{ secrets.ACCESS_KEY_ID }} \
            --access-key-secret ${{ secrets.ACCESS_KEY_SECRET }} \
            --region cn-hangzhou \
            --language zh

      - name: Build Hugo
        if: github.event_name == 'push' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-hugo') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-hugo')
        run: |
          # Fetch Directus articles (all data)
          pnpm run directus

          # Build Hugo
          hugo --minify --enableGitInfo --gc

      - name: Deploy to Aliyun OSS
        if: github.event_name == 'push' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-hugo') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-hugo')
        uses: docker://ghcr.io/eallion/aliyun-oss-website-action:v1
        env:
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
          BUCKET: eallion-com
          ENDPOINT: oss-cn-shanghai.aliyuncs.com
          FOLDER: public
          SKIP_SETTING: true
          INCREMENTAL: true

      - name: Purge Aliyun ESA
        if: github.event_name == 'push' || github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-hugo') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-hugo')
        run: |
          aliyun esa PurgeCaches --SiteId ${{ secrets.ESA_SITE_ID }} --Type purgeall --Content {"PurgeAll":true}

      - name: Build Hugo Album
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-album') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-album')
        run: |
          # Fetch Directus Album
          pnpm run directus:album

          # Build Album
          hugo --minify --enableGitInfo --gc

      - name: Purge Aliyun ESA Album
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-album') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-album')
        run: |
          aliyun oss cp public/album/index.html oss://eallion-com/album/index.html --delete --force
          aliyun esa PurgeCaches \
            --SiteId ${{ secrets.ESA_SITE_ID }} \
            --Type file \
            --Content '{"Files":["https://www.eallion.com/album/index.html"]}'

      - name: Build Hugo Mastodon
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-mastodon') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-mastodon')
        run: |
          # Fetch Latest 30 Mastodon Statuses
          pnpm run directus:mastodon
          pnpm run directus:latest

          # Build Mastodon
          hugo --minify --enableGitInfo --gc

      - name: Purge Aliyun ESA Mastodon
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-mastodon') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-mastodon')
        run: |
          aliyun oss cp public/mastodon/index.html oss://eallion-com/mastodon/index.html --delete --force
          aliyun oss cp public/index.html oss://eallion-com/index.html --delete --force
          aliyun esa PurgeCaches \
            --SiteId ${{ secrets.ESA_SITE_ID }} \
            --Type file \
            --Content '{"Files":["https://www.eallion.com/mastodon/index.html", "https://www.eallion.com/index.html"]}'

      - name: Build Hugo Media
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-media') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-media')
        run: |
          # Fetch NeoDB Completed
          pnpm run directus:media

          # Build Media
          hugo --minify --enableGitInfo --gc

      - name: Purge Aliyun ESA Media
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-media') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-media')
        run: |
          aliyun oss cp public/media/index.html oss://eallion-com/media/index.html --delete --force
          aliyun esa PurgeCaches \
            --SiteId ${{ secrets.ESA_SITE_ID }} \
            --Type file \
            --Content '{"Files":["https://www.eallion.com/media/index.html"]}'

      - name: Build Hugo Penta
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-penta') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-penta')
        run: |
          # Fetch Directus Penta
          pnpm run directus:penta

          # Build Penta
          hugo --minify --enableGitInfo --gc

      - name: Purge Aliyun ESA Penta
        if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build_content == 'build-penta') || (github.event_name == 'repository_dispatch' && github.event.action == 'build-penta')
        run: |
          aliyun oss cp public/penta/index.html oss://eallion-com/penta/index.html --delete --force
          aliyun esa PurgeCaches \
            --SiteId ${{ secrets.ESA_SITE_ID }} \
            --Type file \
            --Content '{"Files":["https://www.eallion.com/penta/index.html"]}'
