name: Build Hugo and Deploy

on:
  push:
    branches:
      - main
  schedule:
   - cron: '0 0 1 * *'
  workflow_dispatch:
  repository_dispatch:
    types: [build-hugo]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_CACHEDIR: /tmp/.buildx-cache
      HUGO_CACHEDIR: /tmp/.hugo_cache
      HUGOMODS_CACHEDIR: /tmp/.hugo_mods_cache
      PNPM_CACHEDIR: /tmp/.pnpm-store

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Get Docker image digest
        id: image-info
        run: |
          DIGEST=$(curl -s "https://hub.docker.com/v2/namespaces/fangbinwei/repositories/aliyun-oss-website-action/tags/v1" | jq -r '.images[] | select(.architecture == "amd64") | .digest')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Cache Docker layers
        id: docker-cache
        continue-on-error: true
        uses: actions/cache@v4
        with:
          path: ${{ env.DOCKER_CACHEDIR }}
          key: ${{ runner.os }}-docker-aliyunoss-${{ steps.image-info.outputs.digest }}
          restore-keys: |
            ${{ runner.os }}-docker-aliyunoss-

      - name: Pull Docker image
        if: ${{ steps.docker-cache.outputs.cache-hit != 'true' }}  # 只在缓存未命中时执行
        run: |
          docker pull fangbinwei/aliyun-oss-website-action:v1

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true

      - name: Build Hugo
        run: |
          hugo --minify --enableGitInfo

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "PNPM_STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PNPM_STORE_PATH }}
            **/node_modules
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-pnpm-store-

#       - name: Install and run Shiki
#         run: |
#           export NODE_OPTIONS="--max_old_space_size=7168"
#           pnpm install
#           pnpm run shiki --silent || true
#           # npx rehype-cli public -o --silent || true
#
#       - name: Deploy to GitHub Pages
#         uses: peaceiris/actions-gh-pages@v4
#         with:
#           personal_token: ${{ secrets.personal_token }}
#           external_repository: eallion/blog
#           publish_branch: main
#           publish_dir: ./public
#           # destination_dir: public
#           allow_empty_commit: true
#           # commit_message: ${{ GitHub.event.head_commit.message }}
#           full_commit_message: ${{ github.event.head_commit.message }}
#           #cname: eallion.com
#           force_orphan: true
#           user_name: 'github-actions[bot]'
#           user_email: 'github-actions[bot]@users.noreply.github.com'
#
#       - name: Publish to Cloudflare Pages
#         uses: cloudflare/wrangler-action@v3
#         with:
#           apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
#           accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
#           quiet: true
#           command: pages deploy public --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }} --commit-dirty=true

      - name: Deploy to Aliyun OSS
        if: ${{ always() && !cancelled() }}  # 只要工作流没有被取消就执行
        uses: docker://fangbinwei/aliyun-oss-website-action:v1
        env:
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
          BUCKET: eallion-com
          ENDPOINT: oss-cn-shanghai.aliyuncs.com
          FOLDER: public
          SKIP_SETTING: true
          INCREMENTAL: true

#       - name: Refresh volcengine CDN
#         run: |
#           curl -s "https://api.github.com/repos/volcengine/volcengine-cli/releases/latest" | grep "browser_download_url.*linux_amd64.zip" | cut -d : -f 2,3 | tr -d \" | wget -O ve.zip -qi -
#           unzip -q ve.zip > /dev/null 2>&1
#           chmod a+x ./ve
#
#           ./ve configure set --profile volcengine-hugo-github-actions --region cn-beijing --endpoint cdn.volcengineapi.com --access-key ${{ secrets.VOLC_ACCESS_KEY }} --secret-key ${{ secrets.VOLC_SECRET_KEY }}
#
#           ./ve cdn SubmitRefreshTask --body '{"Type":"dir","Urls":"https://www.eallion.com/"}' > /dev/null 2>&1 || true

      - name: Refresh Aliyun ESA
        run: |
          pnpm install
          pnpm run esa
        env:
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          ACCESS_KEY_SECRET: ${{ secrets.ACCESS_KEY_SECRET }}
          ESA_SITE_ID: ${{ secrets.ESA_SITE_ID }}
